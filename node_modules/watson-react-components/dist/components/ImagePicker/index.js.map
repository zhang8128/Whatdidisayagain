{"version":3,"sources":["ImagePicker/index.js"],"names":["Dropzone","require","Tile","InputImageUrl","createClass","propTypes","error","PropTypes","string","onClickTile","func","onDrop","onDropAccepted","onDropRejected","onUrlSubmit","onUrlInputChange","onClosePreview","images","arrayOf","shape","url","alt","disablePreviewImage","bool","initialPreviewImage","isRequired","disableFileInput","accept","disableClick","inputProps","object","maxSize","number","minSize","multiple","name","fileError","disableUrlInput","urlPlaceholder","urlError","getDefaultProps","map","_","i","Infinity","getInitialState","state","previewImage","selectedTile","isDragging","props","index","e","indexOf","componentDidMount","document","addEventListener","onDragOver","onDragLeave","componentWillUnmount","removeEventListener","setState","event","call","files","image","preview","showPreview","showUrlInput","render","bind","red_50","Boolean","display","position","visibility","opacity","margin"],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Icon } from '../Icon';\nimport Colors from '../Colors';\nimport ArrowBox from '../ArrowBox';\nconst Dropzone = require('react-dropzone');\n\nconst Tile = require('./Tile');\nconst InputImageUrl = require('./Url');\n\nexport default React.createClass({\n  propTypes: {\n    error: React.PropTypes.string,\n\n    // Event Handlers\n    onClickTile: React.PropTypes.func, // args: image obj this.props.images, index; when file is clicked\n    onDrop: React.PropTypes.func, // args: File image; when file is chosen or dragged and dropped\n    onDropAccepted: React.PropTypes.func, // args: File image; when file is chosen successfully\n    onDropRejected: React.PropTypes.func, // args: File image; when file is chosen unsuccessfully\n    onUrlSubmit: React.PropTypes.func,  // when hitting enter as url input is focused\n    onUrlInputChange: React.PropTypes.func, // event when url input changes\n    onClosePreview: React.PropTypes.func, // event when preview image is closing\n\n    // tile props\n    images: React.PropTypes.arrayOf(React.PropTypes.shape({\n      url: React.PropTypes.string,\n      alt: React.PropTypes.string,\n    })),\n\n    // preview tile props\n    disablePreviewImage: React.PropTypes.bool,\n    initialPreviewImage: React.PropTypes.shape({\n      url: React.PropTypes.string.isRequired,\n      alt: React.PropTypes.string,\n    }), // have component display a preview image by default\n\n    // file input props\n    // detailed documentation on dropzone properties can be found at\n    // https://github.com/okonet/react-dropzone\n    disableFileInput: React.PropTypes.bool, // option to remove File Input / Dropzone component\n    accept: React.PropTypes.string, // accepted filetypes\n    disableClick: React.PropTypes.bool, // option to make dropzone clickable or not\n    inputProps: React.PropTypes.object, // file chooser input properties\n    maxSize: React.PropTypes.number,  // max file size\n    minSize: React.PropTypes.number,  // min file size\n    multiple: React.PropTypes.bool, // option for multiple files\n    name: React.PropTypes.string,\n    fileError: React.PropTypes.string, // error message on file input\n\n    // url input props\n    disableUrlInput: React.PropTypes.bool,  // option to remove url input component\n    urlPlaceholder: React.PropTypes.string, // placeholder text for url input\n    urlError: React.PropTypes.string, // error message on url input\n  },\n\n  getDefaultProps: () => ({\n    // eslint-disable-next-line\n    images: [0, 1, 2, 3].map((_, i) => {\n      return {\n        url: 'https://placeholdit.imgix.net/~text?txtsize=33&txt=200%C3%97150&w=200&h=150',\n        alt: `Sample ${i}`,\n      };\n    }),\n    disablePreviewImage: false,\n    initialPreviewImage: null,\n\n    disableFileInput: false,\n    accept: 'image/*',\n    disableClick: false,\n    inputProps: {},\n    maxSize: Infinity,\n    minSize: 0,\n    multiple: false,\n    name: 'file-chooser',\n\n    disableUrlInput: false,\n    urlPlaceholder: 'Paste an image URL',\n  }),\n\n  getInitialState() {\n    const state = {\n      previewImage: null,  // { url: string, alt: string }\n      selectedTile: -1,\n      isDragging: false,\n    };\n\n    // no image selected\n    if (!this.props.initialPreviewImage || this.props.initialPreviewImage === null) {\n      return state;\n    }\n\n    // image tile is already selected\n    const index = this.props.images.map(e => e.url).indexOf(this.props.initialPreviewImage.url);\n    if (index !== -1) {\n      state.selectedTile = index;\n      return state;\n    }\n\n    // url image selected\n    if (this.props.initialPreviewImage.url) {\n      state.previewImage = {\n        url: this.props.initialPreviewImage.url,\n        alt: this.props.initialPreviewImage.alt || 'User supplied url',\n      };\n      return state;\n    }\n\n    return state;\n  },\n\n  componentDidMount() {\n    document.addEventListener('dragover', this.onDragOver, false);\n    document.addEventListener('dragleave', this.onDragLeave, false);\n  },\n\n  componentWillUnmount() {\n    document.removeEventListener('dragover', this.onDragOver);\n    document.removeEventListener('dragover', this.onDragLeave);\n  },\n\n  onDragOver() {\n    this.setState({ isDragging: true });\n  },\n\n  onDragLeave() {\n    this.setState({ isDragging: false });\n  },\n\n  onUrlSubmit(event, url) {\n    this.setState({\n      previewImage: {\n        url,\n        alt: 'User supplied url',\n      },\n      selectedTile: -1,\n    });\n    if (this.props.onUrlSubmit) {\n      this.props.onUrlSubmit.call(this, { url });\n    }\n  },\n\n  onDrop(files) {\n    const image = files[0];\n    if (this.props.onDrop) {\n      this.props.onDrop.call(this, image);\n    }\n  },\n\n  onDropAccepted(files) {\n    const image = files[0];\n    this.setState({\n      previewImage: { url: image.preview, alt: 'preview image' },\n      selectedTile: -1,\n      isDragging: false,\n    });\n    if (this.props.onDropAccepted) {\n      this.props.onDropAccepted.call(this, image);\n    }\n  },\n\n  onDropRejected(files) {\n    const image = files[0];\n    this.setState({\n      previewImage: null,\n      selectedTile: -1,\n      isDragging: false,\n    });\n    if (this.props.onDropRejected) {\n      this.props.onDropRejected.call(this, image);\n    }\n  },\n\n  onClickTile(index) {\n    this.setState({\n      selectedTile: index,\n      previewImage: null,\n    });\n    if (this.props.onClickTile) {\n      this.props.onClickTile.call(this, this.props.images[index], index);\n    }\n  },\n\n  onClosePreview() {\n    this.setState({\n      previewImage: null,\n    });\n    if (this.props.onClosePreview) {\n      this.props.onClosePreview.call(this);\n    }\n  },\n\n  // boolean logic for showing preview image or not\n  showPreview() {\n    return !this.props.disablePreviewImage &&\n      this.state.previewImage &&\n      !(this.props.fileError || this.props.urlError || this.props.error);\n  },\n\n  // boolean logic for showing url input or not\n  showUrlInput() {\n    // if there is no previewImage, or the previewImage is disabled,\n    // and urlInput is not disabled, and there are any error messages,\n    // then show the url input\n    return (((!this.state.previewImage ||\n      (this.state.previewImage && this.disablePreviewImage)) &&\n      !this.props.disableUrlInput) ||\n      this.props.fileError ||\n      this.props.urlError ||\n      this.props.error);\n  },\n\n  render() {\n    return (\n      <div className=\"image-picker--section\">\n        <div>\n          {this.props.images.map((image, index) => (\n            <Tile\n              grayout={(\n                (this.state.previewImage != null) ||\n                (this.state.selectedTile > -1 && index !== this.state.selectedTile)\n              )}\n              image={image.url}\n              alt={image.alt}\n              key={index}\n              // eslint-disable-next-line\n              onClick={this.onClickTile.bind(null, index)}\n              dataId={index}\n            />)\n          )}\n          {!this.props.disableFileInput ? (\n            <div className=\"image-picker--tile\">\n              <ArrowBox\n                className=\"image-picker--arrow-box\"\n                direction=\"top\"\n                icon=\"error\"\n                color={Colors.red_50}\n                width=\"100%\"\n                show={Boolean(this.props.fileError)}\n              >\n                <p className=\"base--p image-picker--error-message\">{this.props.fileError}</p>\n              </ArrowBox>\n              { this.showPreview() ? (\n                <Icon\n                  className=\"image-picker--preview-x\"\n                  type=\"close\"\n                  size=\"small\"\n                  onClick={this.onClosePreview}\n                />\n              ) : null}\n              <label\n                className={classNames(\n                  'image-picker--tile-input-container',\n                  { 'image-picker--tile-input-container_error': this.props.fileError }\n                )}\n                htmlFor=\"image-picker--file-input\"\n              >\n                { this.showPreview() ? (\n                  <div className=\"image-picker--preview-image-container\">\n                    <img\n                      className=\"image-picker--preview-image\"\n                      src={this.state.previewImage.url}\n                      alt={this.state.previewImage.alt}\n                    />\n                  </div>\n                  ) : null}\n                <Dropzone\n                  accept={this.props.accept}\n                  className={classNames(\n                      'content',\n                      'dropzone',\n                      { 'dropzone_on-drag': this.state.isDragging }\n                  )}\n                  disableClick={this.props.disableClick}\n                  inputProps={this.props.inputProps}\n                  maxSize={this.props.maxSize}\n                  minSize={this.props.minSize}\n                  multiple={this.props.multiple}\n                  name={this.props.name}\n                  onDrop={this.onDrop}\n                  onDropAccepted={this.onDropAccepted}\n                  onDropRejected={this.onDropRejected}\n                >\n                  <div className=\"image-picker--tile-input-description\">\n                    Select or drag an image relative to the shopping category\n                  </div>\n                  <div className=\"image-picker--tile-input-icon\">\n                    <Icon type=\"plus\" size=\"regular\" />\n                  </div>\n                </Dropzone>\n              </label>\n\n              {this.showUrlInput() ? (<InputImageUrl\n                onInputChange={this.props.onUrlInputChange}\n                onSubmit={this.onUrlSubmit}\n                placeholder={this.props.urlPlaceholder}\n                error={this.props.urlError}\n              />) : null}\n\n            </div>\n          ) : null}\n        </div>\n        {this.props.error ? (\n          <ArrowBox\n            className=\"image-picker--arrow-box\"\n            direction=\"none\"\n            icon=\"error\"\n            color={Colors.red_50}\n            style={{\n              display: 'block',\n              position: 'relative',\n              visibility: 'visible',\n              opacity: '1',\n              margin: 'auto',\n            }}\n          >\n            <p className=\"base--p image-picker--error-message\">{this.props.error}</p>\n          </ArrowBox>\n        ) : null}\n      </div>\n    );\n  },\n});\n"]}