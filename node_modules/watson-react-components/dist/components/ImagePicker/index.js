'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('../Icon');

var _Colors = require('../Colors');

var _Colors2 = _interopRequireDefault(_Colors);

var _ArrowBox = require('../ArrowBox');

var _ArrowBox2 = _interopRequireDefault(_ArrowBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Dropzone = require('react-dropzone');

var Tile = require('./Tile');
var InputImageUrl = require('./Url');

exports.default = _react2.default.createClass({
  displayName: 'ImagePicker',

  propTypes: {
    error: _react2.default.PropTypes.string,

    // Event Handlers
    onClickTile: _react2.default.PropTypes.func, // args: image obj this.props.images, index; when file is clicked
    onDrop: _react2.default.PropTypes.func, // args: File image; when file is chosen or dragged and dropped
    onDropAccepted: _react2.default.PropTypes.func, // args: File image; when file is chosen successfully
    onDropRejected: _react2.default.PropTypes.func, // args: File image; when file is chosen unsuccessfully
    onUrlSubmit: _react2.default.PropTypes.func, // when hitting enter as url input is focused
    onUrlInputChange: _react2.default.PropTypes.func, // event when url input changes
    onClosePreview: _react2.default.PropTypes.func, // event when preview image is closing

    // tile props
    images: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
      url: _react2.default.PropTypes.string,
      alt: _react2.default.PropTypes.string
    })),

    // preview tile props
    disablePreviewImage: _react2.default.PropTypes.bool,
    initialPreviewImage: _react2.default.PropTypes.shape({
      url: _react2.default.PropTypes.string.isRequired,
      alt: _react2.default.PropTypes.string
    }), // have component display a preview image by default

    // file input props
    // detailed documentation on dropzone properties can be found at
    // https://github.com/okonet/react-dropzone
    disableFileInput: _react2.default.PropTypes.bool, // option to remove File Input / Dropzone component
    accept: _react2.default.PropTypes.string, // accepted filetypes
    disableClick: _react2.default.PropTypes.bool, // option to make dropzone clickable or not
    inputProps: _react2.default.PropTypes.object, // file chooser input properties
    maxSize: _react2.default.PropTypes.number, // max file size
    minSize: _react2.default.PropTypes.number, // min file size
    multiple: _react2.default.PropTypes.bool, // option for multiple files
    name: _react2.default.PropTypes.string,
    fileError: _react2.default.PropTypes.string, // error message on file input

    // url input props
    disableUrlInput: _react2.default.PropTypes.bool, // option to remove url input component
    urlPlaceholder: _react2.default.PropTypes.string, // placeholder text for url input
    urlError: _react2.default.PropTypes.string },

  getDefaultProps: function getDefaultProps() {
    return {
      // eslint-disable-next-line
      images: [0, 1, 2, 3].map(function (_, i) {
        return {
          url: 'https://placeholdit.imgix.net/~text?txtsize=33&txt=200%C3%97150&w=200&h=150',
          alt: 'Sample ' + i
        };
      }),
      disablePreviewImage: false,
      initialPreviewImage: null,

      disableFileInput: false,
      accept: 'image/*',
      disableClick: false,
      inputProps: {},
      maxSize: Infinity,
      minSize: 0,
      multiple: false,
      name: 'file-chooser',

      disableUrlInput: false,
      urlPlaceholder: 'Paste an image URL'
    };
  },

  getInitialState: function getInitialState() {
    var state = {
      previewImage: null, // { url: string, alt: string }
      selectedTile: -1,
      isDragging: false
    };

    // no image selected
    if (!this.props.initialPreviewImage || this.props.initialPreviewImage === null) {
      return state;
    }

    // image tile is already selected
    var index = this.props.images.map(function (e) {
      return e.url;
    }).indexOf(this.props.initialPreviewImage.url);
    if (index !== -1) {
      state.selectedTile = index;
      return state;
    }

    // url image selected
    if (this.props.initialPreviewImage.url) {
      state.previewImage = {
        url: this.props.initialPreviewImage.url,
        alt: this.props.initialPreviewImage.alt || 'User supplied url'
      };
      return state;
    }

    return state;
  },
  componentDidMount: function componentDidMount() {
    document.addEventListener('dragover', this.onDragOver, false);
    document.addEventListener('dragleave', this.onDragLeave, false);
  },
  componentWillUnmount: function componentWillUnmount() {
    document.removeEventListener('dragover', this.onDragOver);
    document.removeEventListener('dragover', this.onDragLeave);
  },
  onDragOver: function onDragOver() {
    this.setState({ isDragging: true });
  },
  onDragLeave: function onDragLeave() {
    this.setState({ isDragging: false });
  },
  onUrlSubmit: function onUrlSubmit(event, url) {
    this.setState({
      previewImage: {
        url: url,
        alt: 'User supplied url'
      },
      selectedTile: -1
    });
    if (this.props.onUrlSubmit) {
      this.props.onUrlSubmit.call(this, { url: url });
    }
  },
  onDrop: function onDrop(files) {
    var image = files[0];
    if (this.props.onDrop) {
      this.props.onDrop.call(this, image);
    }
  },
  onDropAccepted: function onDropAccepted(files) {
    var image = files[0];
    this.setState({
      previewImage: { url: image.preview, alt: 'preview image' },
      selectedTile: -1,
      isDragging: false
    });
    if (this.props.onDropAccepted) {
      this.props.onDropAccepted.call(this, image);
    }
  },
  onDropRejected: function onDropRejected(files) {
    var image = files[0];
    this.setState({
      previewImage: null,
      selectedTile: -1,
      isDragging: false
    });
    if (this.props.onDropRejected) {
      this.props.onDropRejected.call(this, image);
    }
  },
  onClickTile: function onClickTile(index) {
    this.setState({
      selectedTile: index,
      previewImage: null
    });
    if (this.props.onClickTile) {
      this.props.onClickTile.call(this, this.props.images[index], index);
    }
  },
  onClosePreview: function onClosePreview() {
    this.setState({
      previewImage: null
    });
    if (this.props.onClosePreview) {
      this.props.onClosePreview.call(this);
    }
  },


  // boolean logic for showing preview image or not
  showPreview: function showPreview() {
    return !this.props.disablePreviewImage && this.state.previewImage && !(this.props.fileError || this.props.urlError || this.props.error);
  },


  // boolean logic for showing url input or not
  showUrlInput: function showUrlInput() {
    // if there is no previewImage, or the previewImage is disabled,
    // and urlInput is not disabled, and there are any error messages,
    // then show the url input
    return (!this.state.previewImage || this.state.previewImage && this.disablePreviewImage) && !this.props.disableUrlInput || this.props.fileError || this.props.urlError || this.props.error;
  },
  render: function render() {
    var _this = this;

    return _react2.default.createElement(
      'div',
      { className: 'image-picker--section' },
      _react2.default.createElement(
        'div',
        null,
        this.props.images.map(function (image, index) {
          return _react2.default.createElement(Tile, {
            grayout: _this.state.previewImage != null || _this.state.selectedTile > -1 && index !== _this.state.selectedTile,
            image: image.url,
            alt: image.alt,
            key: index
            // eslint-disable-next-line
            , onClick: _this.onClickTile.bind(null, index),
            dataId: index
          });
        }),
        !this.props.disableFileInput ? _react2.default.createElement(
          'div',
          { className: 'image-picker--tile' },
          _react2.default.createElement(
            _ArrowBox2.default,
            {
              className: 'image-picker--arrow-box',
              direction: 'top',
              icon: 'error',
              color: _Colors2.default.red_50,
              width: '100%',
              show: Boolean(this.props.fileError)
            },
            _react2.default.createElement(
              'p',
              { className: 'base--p image-picker--error-message' },
              this.props.fileError
            )
          ),
          this.showPreview() ? _react2.default.createElement(_Icon.Icon, {
            className: 'image-picker--preview-x',
            type: 'close',
            size: 'small',
            onClick: this.onClosePreview
          }) : null,
          _react2.default.createElement(
            'label',
            {
              className: (0, _classnames2.default)('image-picker--tile-input-container', { 'image-picker--tile-input-container_error': this.props.fileError }),
              htmlFor: 'image-picker--file-input'
            },
            this.showPreview() ? _react2.default.createElement(
              'div',
              { className: 'image-picker--preview-image-container' },
              _react2.default.createElement('img', {
                className: 'image-picker--preview-image',
                src: this.state.previewImage.url,
                alt: this.state.previewImage.alt
              })
            ) : null,
            _react2.default.createElement(
              Dropzone,
              {
                accept: this.props.accept,
                className: (0, _classnames2.default)('content', 'dropzone', { 'dropzone_on-drag': this.state.isDragging }),
                disableClick: this.props.disableClick,
                inputProps: this.props.inputProps,
                maxSize: this.props.maxSize,
                minSize: this.props.minSize,
                multiple: this.props.multiple,
                name: this.props.name,
                onDrop: this.onDrop,
                onDropAccepted: this.onDropAccepted,
                onDropRejected: this.onDropRejected
              },
              _react2.default.createElement(
                'div',
                { className: 'image-picker--tile-input-description' },
                'Select or drag an image relative to the shopping category'
              ),
              _react2.default.createElement(
                'div',
                { className: 'image-picker--tile-input-icon' },
                _react2.default.createElement(_Icon.Icon, { type: 'plus', size: 'regular' })
              )
            )
          ),
          this.showUrlInput() ? _react2.default.createElement(InputImageUrl, {
            onInputChange: this.props.onUrlInputChange,
            onSubmit: this.onUrlSubmit,
            placeholder: this.props.urlPlaceholder,
            error: this.props.urlError
          }) : null
        ) : null
      ),
      this.props.error ? _react2.default.createElement(
        _ArrowBox2.default,
        {
          className: 'image-picker--arrow-box',
          direction: 'none',
          icon: 'error',
          color: _Colors2.default.red_50,
          style: {
            display: 'block',
            position: 'relative',
            visibility: 'visible',
            opacity: '1',
            margin: 'auto'
          }
        },
        _react2.default.createElement(
          'p',
          { className: 'base--p image-picker--error-message' },
          this.props.error
        )
      ) : null
    );
  }
});
module.exports = exports['default'];
//# sourceMappingURL=index.js.map
