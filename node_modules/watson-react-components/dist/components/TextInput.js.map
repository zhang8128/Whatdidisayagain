{"version":3,"sources":["TextInput.js"],"names":["padding","createClass","propTypes","onInput","PropTypes","func","getDefaultProps","id","Math","round","random","placeholder","getInitialState","inputWidth","e","dummy","target","nextSibling","value","replace","text","textContent","setState","offsetWidth","props","call","render","empty","state","width"],"mappings":";;;;;;kQAAA;;;;;AAKA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,CAAhB;;kBAEe,gBAAMC,WAAN,CAAkB;AAAA;;AAC/B;AACAC,aAAW;AACTC,aAAS,gBAAMC,SAAN,CAAgBC;AADhB,GAFoB;;AAM/BC,iBAN+B,6BAMb;AAChB,WAAO;AACLC,yBAAiBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,IAA3B,CADZ;AAELC,mBAAa;AAFR,KAAP;AAID,GAX8B;AAa/BC,iBAb+B,6BAab;AAChB,WAAO;AACLC,kBAAYb;AADP,KAAP;AAGD,GAjB8B;AAmB/BG,SAnB+B,mBAmBvBW,CAnBuB,EAmBpB;AACT,QAAMC,QAAQD,EAAEE,MAAF,CAASC,WAAvB;AACA;AACA;AACA;AACA;AACA;AACAH,MAAEE,MAAF,CAASE,KAAT,GAAiBJ,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAjB,CAPS,CAO4C;AACrD,QAAMC,OAAON,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAb;AACAJ,UAAMM,WAAN,GAAoBD,IAApB;AACA,SAAKE,QAAL,CAAc;AACZT,kBAAYE,MAAMQ,WAAN,GAAoBvB;AADpB,KAAd;;AAIA,QAAI,KAAKwB,KAAL,CAAWrB,OAAf,EAAwB;AACtB,WAAKqB,KAAL,CAAWrB,OAAX,CAAmBsB,IAAnB,CAAwB,IAAxB,EAA8BX,CAA9B;AACD;AACF,GApC8B;AAsC/BY,QAtC+B,oBAsCtB;AACP,WACE;AAAA;AAAA;AACE;AACA,iBAAS,KAAKF,KAAL,CAAWjB,EAFtB;AAGE,mBAAU;AAHZ;AAKE;AACE,cAAK,MADP;AAEE,mBAAW,0BACT,mBADS,EAET,aAFS,EAGT,EAAEoB,OAAO,KAAKC,KAAL,CAAWf,UAAX,KAA0Bb,OAAnC,EAHS,CAFb;AAOE,eAAO,EAAE6B,OACN,KAAKD,KAAL,CAAWf,UAAX,GAAwBb,OAAxB,GACI,KAAK4B,KAAL,CAAWf,UADf,UAEC;AAHG;AAPT,SAYM,KAAKW,KAZX;AAaE,iBAAS,KAAKrB;AAbhB,SALF;AAoBE,8CAAM,WAAU,mBAAhB;AApBF,KADF;AAwBD;AA/D8B,CAAlB,C","file":"TextInput.js","sourcesContent":["/*\nThis implementation was modeled after the input in\nhttps://conversation-simple.mybluemix.net/\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nconst padding = 2;\n\nexport default React.createClass({\n  // all html input[type=\"text\"] properties are valid\n  propTypes: {\n    onInput: React.PropTypes.func,\n  },\n\n  getDefaultProps() {\n    return {\n      id: `textinput-${Math.round(Math.random() * 1000)}`,\n      placeholder: 'Type Something',\n    };\n  },\n\n  getInitialState() {\n    return {\n      inputWidth: padding,\n    };\n  },\n\n  onInput(e) {\n    const dummy = e.target.nextSibling;\n    // this is a hack for when you type space,\n    // input text gets shifted because of mismatched width between\n    // dummy and real input.  Char 'r' is used because it has the same\n    // length as a char ' ' in order for the width of the space to count.\n    // eslint-disable-next-line\n    e.target.value = e.target.value.replace(/\\t/g, ' '); // change tabs to spaces\n    const text = e.target.value.replace(/\\s/g, 'r');\n    dummy.textContent = text;\n    this.setState({\n      inputWidth: dummy.offsetWidth + padding,\n    });\n\n    if (this.props.onInput) {\n      this.props.onInput.call(this, e);\n    }\n  },\n\n  render() {\n    return (\n      <label\n        // eslint-disable-next-line react/prop-types\n        htmlFor={this.props.id}\n        className=\"text-input\"\n      >\n        <input\n          type=\"text\"\n          className={classNames(\n            'text-input--input',\n            'base--input',\n            { empty: this.state.inputWidth === padding }\n          )}\n          style={{ width:\n            (this.state.inputWidth > padding ?\n              `${this.state.inputWidth}px` :\n              '100%'),\n          }}\n          {...this.props}\n          onInput={this.onInput}\n        />\n        <span className=\"text-input--dummy\" />\n      </label>\n    );\n  },\n});\n"]}