'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint max-len:off */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Colors = require('./Colors');

var _Colors2 = _interopRequireDefault(_Colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getValue = function getValue(str) {
  return str.match(/^[0-9]*/g)[0];
};
var getUnit = function getUnit(str) {
  return str.match(/[^0-9].*/g)[0];
};
var capitalize = function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var hasUnit = function hasUnit(str) {
  var bool = false;
  if (typeof str !== 'undefined' && str !== null && getValue(str).length > 0) {
    bool = true;
  }
  return bool;
};
var halfUnit = function halfUnit(str) {
  return getValue(str) / 2 + getUnit(str);
};

exports.default = _react2.default.createClass({
  displayName: 'ArrowBox',

  propTypes: {
    direction: _react2.default.PropTypes.oneOf(['top', 'right', 'bottom', 'left', 'none']),
    show: _react2.default.PropTypes.bool,
    icon: _react2.default.PropTypes.oneOf([].concat(_Icon.IconTypes, null)),
    color: _react2.default.PropTypes.string,
    width: _react2.default.PropTypes.string,
    height: _react2.default.PropTypes.string,
    // Offset from element that arrow box is relative to.
    // Ex. if relativeOffset = '50%', then the arrow box is
    // 50% of the main element's width or height
    relativeOffset: _react2.default.PropTypes.string,
    manualPositioning: _react2.default.PropTypes.string,
    style: _react2.default.PropTypes.object,
    arrowStyle: _react2.default.PropTypes.object,
    className: _react2.default.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      direction: 'top',
      show: false,
      width: '15rem',
      height: 'auto',
      relativeOffset: '50%',
      icon: null,
      color: _Colors2.default.gray_50
    };
  },
  render: function render() {
    // Use manualPositioning first.
    // If no manualPositioning, but height/width has a defined unit value
    // in css, then use half of that. Or else just use 0px.
    var posHeight = this.props.manualPositioning;
    var posWidth = this.props.manualPositioning;

    if (!posHeight) {
      if (hasUnit(this.props.height)) {
        posHeight = halfUnit(this.props.height);
      } else {
        posHeight = '0px';
      }
    }

    if (!posWidth) {
      if (hasUnit(this.props.width)) {
        posWidth = halfUnit(this.props.width);
      } else {
        posWidth = '0px';
      }
    }

    var directions = {
      top: {
        bottom: 'calc(100% + 1rem)',
        left: 'calc(' + this.props.relativeOffset + ' - ' + posWidth + ')'
      },
      right: {
        left: 'calc(100% + 1rem)',
        top: 'calc(' + this.props.relativeOffset + ' - ' + posHeight + ')'
      },
      bottom: {
        top: 'calc(100% + 1rem)',
        left: 'calc(' + this.props.relativeOffset + ' - ' + posWidth + ')'
      },
      left: {
        right: 'calc(100% + 1rem)',
        top: 'calc(' + this.props.relativeOffset + ' - ' + posHeight + ')'
      },
      none: {}
    };
    var borderStyle = {};
    if (this.props.direction !== 'none') {
      borderStyle['border' + capitalize(this.props.direction) + 'Color'] = this.props.color;
    }

    return _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)('arrow-box', { 'arrow-box_top': this.props.direction === 'top' }, { 'arrow-box_right': this.props.direction === 'right' }, { 'arrow-box_bottom': this.props.direction === 'bottom' }, { 'arrow-box_left': this.props.direction === 'left' }, { 'arrow-box_no-arrow': this.props.direction === 'none' }, { 'arrow-box_hidden': !this.props.show }, this.props.className),
        style: _extends(directions[this.props.direction], { width: this.props.width }, { height: this.props.height }, { backgroundColor: this.props.color }, this.props.style)
      },
      // eslint-disable-next-line react/prop-types
      this.props.children,
      _react2.default.createElement('span', {
        className: 'arrow-box--arrow',
        style: _extends(borderStyle, this.props.arrowStyle)
      }),
      this.props.icon ? _react2.default.createElement(_Icon.Icon, {
        className: 'arrow-box--icon',
        type: this.props.icon,
        size: 'regular',
        fill: this.props.color
      }) : null
    );
  }
});
module.exports = exports['default'];
//# sourceMappingURL=ArrowBox.js.map
