{"version":3,"sources":["ArrowBox.js"],"names":["getValue","str","match","getUnit","capitalize","charAt","toUpperCase","slice","hasUnit","bool","length","halfUnit","createClass","propTypes","direction","PropTypes","oneOf","show","icon","concat","color","string","width","height","relativeOffset","manualPositioning","style","object","arrowStyle","className","getDefaultProps","gray_50","render","posHeight","props","posWidth","directions","top","bottom","left","right","none","borderStyle","backgroundColor","children"],"mappings":"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","file":"ArrowBox.js","sourcesContent":["/* eslint max-len:off */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Icon, IconTypes } from './Icon';\nimport Colors from './Colors';\n\nconst getValue = str => str.match(/^[0-9]*/g)[0];\nconst getUnit = str => str.match(/[^0-9].*/g)[0];\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\nconst hasUnit = (str) => {\n  let bool = false;\n  if (typeof str !== 'undefined' &&\n      str !== null &&\n      getValue(str).length > 0) {\n    bool = true;\n  }\n  return bool;\n};\nconst halfUnit = str => (getValue(str) / 2) + getUnit(str);\n\nexport default React.createClass({\n  propTypes: {\n    direction: React.PropTypes.oneOf(['top', 'right', 'bottom', 'left', 'none']),\n    show: React.PropTypes.bool,\n    icon: React.PropTypes.oneOf([].concat(IconTypes, null)),\n    color: React.PropTypes.string,\n    width: React.PropTypes.string,\n    height: React.PropTypes.string,\n    // Offset from element that arrow box is relative to.\n    // Ex. if relativeOffset = '50%', then the arrow box is\n    // 50% of the main element's width or height\n    relativeOffset: React.PropTypes.string,\n    manualPositioning: React.PropTypes.string,\n    style: React.PropTypes.object,\n    arrowStyle: React.PropTypes.object,\n    className: React.PropTypes.string,\n  },\n\n  getDefaultProps() {\n    return {\n      direction: 'top',\n      show: false,\n      width: '15rem',\n      height: 'auto',\n      relativeOffset: '50%',\n      icon: null,\n      color: Colors.gray_50,\n    };\n  },\n\n  render() {\n    // Use manualPositioning first.\n    // If no manualPositioning, but height/width has a defined unit value\n    // in css, then use half of that. Or else just use 0px.\n    let posHeight = this.props.manualPositioning;\n    let posWidth = this.props.manualPositioning;\n\n    if (!posHeight) {\n      if (hasUnit(this.props.height)) {\n        posHeight = halfUnit(this.props.height);\n      } else {\n        posHeight = '0px';\n      }\n    }\n\n    if (!posWidth) {\n      if (hasUnit(this.props.width)) {\n        posWidth = halfUnit(this.props.width);\n      } else {\n        posWidth = '0px';\n      }\n    }\n\n    const directions = {\n      top: {\n        bottom: 'calc(100% + 1rem)',\n        left: `calc(${this.props.relativeOffset} - ${posWidth})`,\n      },\n      right: {\n        left: 'calc(100% + 1rem)',\n        top: `calc(${this.props.relativeOffset} - ${posHeight})`,\n      },\n      bottom: {\n        top: 'calc(100% + 1rem)',\n        left: `calc(${this.props.relativeOffset} - ${posWidth})`,\n      },\n      left: {\n        right: 'calc(100% + 1rem)',\n        top: `calc(${this.props.relativeOffset} - ${posHeight})`,\n      },\n      none: {},\n    };\n    const borderStyle = {};\n    if (this.props.direction !== 'none') {\n      borderStyle[`border${capitalize(this.props.direction)}Color`] = this.props.color;\n    }\n\n    return (\n      <div\n        className={classNames(\n          'arrow-box',\n          { 'arrow-box_top': this.props.direction === 'top' },\n          { 'arrow-box_right': this.props.direction === 'right' },\n          { 'arrow-box_bottom': this.props.direction === 'bottom' },\n          { 'arrow-box_left': this.props.direction === 'left' },\n          { 'arrow-box_no-arrow': this.props.direction === 'none' },\n          { 'arrow-box_hidden': !this.props.show },\n          this.props.className\n        )}\n        style={Object.assign(\n          directions[this.props.direction],\n          { width: this.props.width },\n          { height: this.props.height },\n          { backgroundColor: this.props.color },\n          this.props.style\n        )}\n      >\n        { // eslint-disable-next-line react/prop-types\n          this.props.children }\n        <span\n          className=\"arrow-box--arrow\"\n          style={Object.assign(\n            borderStyle,\n            this.props.arrowStyle\n          )}\n        />\n        { this.props.icon ?\n          (<Icon\n            className=\"arrow-box--icon\"\n            type={this.props.icon}\n            size=\"regular\"\n            fill={this.props.color}\n          />) : null }\n      </div>\n    );\n  },\n});\n"]}